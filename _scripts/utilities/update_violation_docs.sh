#!/bin/bash
# =============================================================================
# Update Documentation with Current Violation Statistics
# =============================================================================
# Update documentation files with current violation counts and compliance stats
# Part of Phase 4: Documentation Maintenance System

echo "üìù Updating documentation with current violation statistics..."

# Get current violation count
current_count=$(grep -r "margin-bottom.*var(--space-[4-9]" assets/css/ | grep -v ".backup" | grep -v ".BACKUP" | wc -l | tr -d ' ')
baseline_violations=87
initial_violations=595

# Calculate compliance percentage
compliance=$(( (initial_violations - current_count) * 100 / initial_violations ))

# Update current status in technical standards
if [ -f "_docs/technical-standards.md" ]; then
    # Update violation count in technical standards
    sed -i '' "s/87 violations (monitored)/$current_count violations (monitored)/" _docs/technical-standards.md
    
    # Update compliance percentage if it exists
    sed -i '' "s/85% site-wide cleanup/$compliance% site-wide cleanup/" _docs/technical-standards.md
    
    echo "‚úÖ Updated technical-standards.md with current violation count: $current_count"
else
    echo "‚ö†Ô∏è  technical-standards.md not found - skipping update"
fi

# Update CLAUDE.md if it exists
if [ -f "CLAUDE.md" ]; then
    # Update violation count in CLAUDE.md
    sed -i '' "s/87 violations remaining/$current_count violations remaining/" CLAUDE.md
    
    # Update compliance percentage
    sed -i '' "s/85% site-wide cleanup/$compliance% site-wide cleanup/" CLAUDE.md
    
    echo "‚úÖ Updated CLAUDE.md with current violation count: $current_count"
else
    echo "‚ö†Ô∏è  CLAUDE.md not found - skipping update"
fi

# Create/update current status file
cat > _docs/current-violation-status.md << EOF
# Current Section Margin Violation Status

**Last Updated**: $(date)

## Current Statistics
- **Total violations**: $current_count
- **Baseline**: $baseline_violations (Phase 3 completion)
- **Initial count**: $initial_violations
- **Compliance**: $compliance%

## Achievement Summary
- **Total eliminated**: $((initial_violations - current_count)) violations
- **Phase 3 success**: 100% page consistency achieved
- **Current focus**: Maintaining page-level consistency

## Breakdown by Area
- **Pages**: $(grep -r "margin-bottom.*var(--space-[4-9]" assets/css/pages/ 2>/dev/null | grep -v ".backup" | grep -v ".BACKUP" | wc -l | tr -d ' ') violations
- **Components**: $(grep -r "margin-bottom.*var(--space-[4-9]" assets/css/components/ 2>/dev/null | grep -v ".backup" | grep -v ".BACKUP" | wc -l | tr -d ' ') violations
- **Layout**: $(grep -r "margin-bottom.*var(--space-[4-9]" assets/css/layout/ 2>/dev/null | grep -v ".backup" | grep -v ".BACKUP" | wc -l | tr -d ' ') violations
- **Collections**: $(grep -r "margin-bottom.*var(--space-[4-9]" assets/css/collections/ 2>/dev/null | grep -v ".backup" | grep -v ".BACKUP" | wc -l | tr -d ' ') violations

## Status
$(if [ $current_count -eq $baseline_violations ]; then echo "‚úÖ STABLE: Maintaining baseline compliance"; elif [ $current_count -lt $baseline_violations ]; then echo "üìà IMPROVEMENT: $((baseline_violations - current_count)) violations eliminated since baseline"; else echo "‚ö†Ô∏è  REGRESSION: $((current_count - baseline_violations)) violations added since baseline"; fi)

## Prevention System
- **Automated validation**: Active via pre-commit hooks
- **Monitoring**: Monthly audit scripts available
- **Documentation**: Automatically updated with current statistics

---
*Generated by: _scripts/utilities/update_violation_docs.sh*
EOF

echo "‚úÖ Created current-violation-status.md with detailed statistics"

echo ""
echo "üìä Documentation update complete:"
echo "   Current violations: $current_count"
echo "   Compliance: $compliance%"
echo "   Status: $(if [ $current_count -eq $baseline_violations ]; then echo "Stable"; elif [ $current_count -lt $baseline_violations ]; then echo "Improved"; else echo "Regression"; fi)"